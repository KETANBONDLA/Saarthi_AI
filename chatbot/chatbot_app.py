import os
import dotenv
import streamlit as st
import speech_recognition as sr
import google.generativeai as genai
dotenv.load_dotenv()

# Configuration and setup
genai.configure(api_key=os.getenv("GENAI_KEY"))  # Replace with your actual Gemini API key
model = genai.GenerativeModel("gemini-1.5-pro-001")

# Language support dictionary
language_codes = {
    "рд╣рд┐рдВрджреА (Hindi)": "hi",
    "English": "en",
    "ржмрж╛ржВрж▓рж╛ (Bengali)": "bn",
    "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)": "te",
    "рдорд░рд╛рдареА (Marathi)": "mr",
    "родрооро┐ро┤рпН (Tamil)": "ta",
    "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)": "gu",
    "р▓Хр▓ир│Нр▓ир▓б (Kannada)": "kn",
    "рикрй░риЬри╛римрйА (Punjabi)": "pa",
    "рмУрмбрм╝рм┐рмЖ (Odia)": "or"
}

# Speech to text conversion based on selected language
def speech_to_text(language_code):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source, duration=1)
        st.info(f"ЁЯОд Listening... (Please speak now)")
        try: 
            audio = recognizer.listen(source, timeout=10, phrase_time_limit=50)
            try:
                text = recognizer.recognize_google(audio, language=language_code)
                return text
            except sr.UnknownValueError:
                return "тЭМ Could not understand audio"
            except sr.RequestError:
                return "тЭМ Speech service unavailable"
        except sr.WaitTimeoutError:
            return "тЭМ No speech detected within timeout period"


def preprocess_text(text, language_code):
    """Apply NLP preprocessing techniques to user input"""
    # Convert to lowercase (for non-Hindi languages)
    if language_code != "hi":
        text = text.lower()
    
    # Remove extra whitespace
    text = ' '.join(text.split())
    
    # Basic stopword removal for English
    if language_code == "en":
        common_stop_words = ['the', 'a', 'an', 'is', 'are', 'in', 'at', 'on']
        words = text.split()
        filtered_words = [word for word in words if word not in common_stop_words]
        text = ' '.join(filtered_words)
    
    # Log preprocessing steps for demonstration
    st.session_state['preprocessing_log'] = f"Original: '{text}'\nPreprocessed: '{text}'"
    
    return text


def classify_intent(question, language_code):
    """Simple rule-based intent classification"""
    # Define keywords for different intents in different languages
    intent_keywords = {
        "disease": {
            "en": ["disease", "infected", "spots", "wilting", "yellow", "pest"],
            "hi": ["рд░реЛрдЧ", "рдХреАрдЯ", "рдмреАрдорд╛рд░реА", "рдзрдмреНрдмреЗ", "рд╕реВрдЦрдирд╛", "рдкреАрд▓рд╛"]
        },
        "fertilizer": {
            "en": ["fertilizer", "nutrient", "npk", "manure", "compost"],
            "hi": ["рдЙрд░реНрд╡рд░рдХ", "рдЦрд╛рдж", "рдкреЛрд╖рдХ рддрддреНрд╡", "рдирддреНрд░рдЬрди", "рдлрд╛рд╕реНрдлреЛрд░рд╕"]
        },
        "weather": {
            "en": ["rain", "weather", "temperature", "monsoon", "irrigation"],
            "hi": ["рдмрд╛рд░рд┐рд╢", "рдореМрд╕рдо", "рддрд╛рдкрдорд╛рди", "рд╡рд░реНрд╖рд╛", "рд╕рд┐рдВрдЪрд╛рдИ"]
        },
        "market": {
            "en": ["price", "market", "sell", "cost", "profit", "msp"],
            "hi": ["рдореВрд▓реНрдп", "рдмрд╛рдЬрд╛рд░", "рд╡рд┐рдХреНрд░рдп", "рд▓рд╛рдЧрдд", "рд▓рд╛рдн"]
        }
    }
    
    question = question.lower()
    detected_intents = []
    
    # Check for each intent
    for intent, keywords in intent_keywords.items():
        lang_keys = keywords.get(language_code, keywords.get("en", []))
        for keyword in lang_keys:
            if keyword.lower() in question:
                detected_intents.append(intent)
                break
    
    # Default intent if none detected
    if not detected_intents:
        return "general"
    
    # Return the most likely intent
    return detected_intents[0]

def extract_entities(text, language_code):
    """Simple rule-based named entity recognition for crops and locations"""
    # Sample crop and location dictionaries (expand these)
    crops = {
        "en": ["rice", "wheat", "maize", "cotton", "sugarcane", "potato", "tomato"],
        "hi": ["рдЪрд╛рд╡рд▓", "рдЧреЗрд╣реВрдБ", "рдордХреНрдХрд╛", "рдХрдкрд╛рд╕", "рдЧрдиреНрдирд╛", "рдЖрд▓реВ", "рдЯрдорд╛рдЯрд░"]
    }
    
    indian_states = {
        "en": ["maharashtra", "punjab", "uttar pradesh", "karnataka", "gujarat"],
        "hi": ["рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░", "рдкрдВрдЬрд╛рдм", "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢", "рдХрд░реНрдирд╛рдЯрдХ", "рдЧреБрдЬрд░рд╛рдд"]
    }
    
    found_crops = []
    found_locations = []
    
    text_lower = text.lower()
    
    # Check for crops
    crop_list = crops.get(language_code, crops["en"])
    for crop in crop_list:
        if crop.lower() in text_lower:
            found_crops.append(crop)
    
    # Check for locations
    location_list = indian_states.get(language_code, indian_states["en"])
    for location in location_list:
        if location.lower() in text_lower:
            found_locations.append(location)
    
    return {
        "crops": found_crops,
        "locations": found_locations
    }

def analyze_sentiment(text, language_code):
    """Simple rule-based sentiment analysis"""
    # Positive and negative keywords in different languages
    sentiments = {
        "positive": {
            "en": ["good", "better", "best", "increase", "improve", "help", "benefit"],
            "hi": ["рдЕрдЪреНрдЫрд╛", "рдмреЗрд╣рддрд░", "рдмрдврд╝рд┐рдпрд╛", "рд╡реГрджреНрдзрд┐", "рд╕реБрдзрд╛рд░", "рдорджрдж", "рд▓рд╛рдн"]
        },
        "negative": {
            "en": ["bad", "worse", "decrease", "damage", "problem", "issue", "worry"],
            "hi": ["рдмреБрд░рд╛", "рдЦрд░рд╛рдм", "рдХрдореА", "рдиреБрдХрд╕рд╛рди", "рд╕рдорд╕реНрдпрд╛", "рдЪрд┐рдВрддрд╛", "рд╣рд╛рдирд┐"]
        }
    }
    
    text_lower = text.lower()
    pos_count = 0
    neg_count = 0
    
    # Count sentiment words
    for word in sentiments["positive"].get(language_code, sentiments["positive"]["en"]):
        if word in text_lower:
            pos_count += 1
    
    for word in sentiments["negative"].get(language_code, sentiments["negative"]["en"]):
        if word in text_lower:
            neg_count += 1
    
    # Determine sentiment
    if pos_count > neg_count:
        return "positive"
    elif neg_count > pos_count:
        return "negative"
    else:
        return "neutral"
    
def generate_response_template(intent, entities, sentiment, language_code):
    """Generate response template based on NLP analysis"""
    templates = {
        "disease": {
            "en": "I see you're asking about plant diseases{crop_info}. Let me provide information on that...",
            "hi": "рдореИрдВ рджреЗрдЦ рд░рд╣рд╛ рд╣реВрдБ рдХрд┐ рдЖрдк рдкреМрдзреЛрдВ рдХреЗ рд░реЛрдЧреЛрдВ{crop_info} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд░рд╣реЗ рд╣реИрдВред рдореБрдЭреЗ рдЗрд╕ рдкрд░ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВ..."
        },
        "fertilizer": {
            "en": "You're interested in fertilizers{crop_info}. Here's what you should know...",
            "hi": "рдЖрдк рдЙрд░реНрд╡рд░рдХреЛрдВ{crop_info} рдореЗрдВ рд░реБрдЪрд┐ рд░рдЦрддреЗ рд╣реИрдВред рдЖрдкрдХреЛ рдпрд╣ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рд┐рдП..."
        },
        # Add more templates for other intents
    }
    
    # Insert crop information if available
    crop_info = ""
    if entities["crops"]:
        if language_code == "en":
            crop_info = f" for {', '.join(entities['crops'])}"
        elif language_code == "hi":
            crop_info = f" {', '.join(entities['crops'])} рдХреЗ рд▓рд┐рдП"
    
    # Get appropriate template
    template = templates.get(intent, {}).get(language_code, "I'll help you with that question.")
    if isinstance(template, str):
        template = template.format(crop_info=crop_info)
    
    return template

# Generate language-specific greeting
def get_greeting(language_code):
    greetings = {
        "hi": "рдирдорд╕реНрддреЗ, рдореИрдВ рд╕рд╛рд░рдереА рд╣реВрдБред рдЖрдк рдХреГрд╖рд┐ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдИ рднреА рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред",
        "en": "Hello, I am Saarthi. You can ask me any agriculture-related question.",
        "bn": "ржиржорж╕рзНржХрж╛рж░, ржЖржорж┐ рж╕рж╛рж░ржерж┐ред ржЖржкржирж┐ ржЖржорж╛ржХрзЗ ржХрзГрж╖рж┐ рж╕ржорзНржкрж░рзНржХрж┐ржд ржпрзЗржХрзЛржи ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред",
        "te": "р░╣р░▓р▒Л, р░ир▒Зр░ир▒Б р░╕р░╛р░░р░ер░┐. р░ор▒Ар░░р▒Б р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир░┐р░Хр░┐ р░╕р░Вр░мр░Вр░зр░┐р░Вр░Ър░┐р░и р░П р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Ер░бр░Чр░╡р░Ър▒Нр░Ър▒Б.",
        "mr": "рдирдорд╕реНрдХрд╛рд░, рдореА рд╕рд╛рд░рдереА рдЖрд╣реЗ. рддреБрдореНрд╣реА рдорд▓рд╛ рд╢реЗрддреАрд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдгрддрд╛рд╣реА рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░реВ рд╢рдХрддрд╛.",
        "ta": "ро╡рогроХрпНроХроорпН, роиро╛ройрпН роЪро╛ро░родро┐. роирпАроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропроорпН родрпКроЯро░рпНрокро╛рой роОроирпНродроХрпН роХрпЗро│рпНро╡ро┐ропрпИропрпБроорпН роОройрпНройро┐роЯроорпН роХрпЗроЯрпНроХро▓ро╛роорпН.",
        "gu": "ркиркорк╕рлНркдрлЗ, рк╣рлБркВ рк╕рк╛рк░ркерлА ркЫрлБркВ. ркдркорлЗ ркоркирлЗ ркХрлГрк╖рк┐ рк╕ркВркмркВркзрк┐ркд ркХрлЛркИрккркг рккрлНрк░рк╢рлНрки рккрлВркЫрлА рк╢ркХрлЛ ркЫрлЛ.",
        "kn": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░, р▓ир▓╛р▓ир│Б р▓╕р▓╛р▓░р▓ер▓┐. р▓ир│Ар▓╡р│Б р▓ир▓ир│Нр▓ир▓ир│Нр▓ир│Б р▓Хр│Гр▓╖р▓┐р▓Чр│Ж р▓╕р▓Вр▓мр▓Вр▓зр▓┐р▓╕р▓┐р▓ж р▓пр▓╛р▓╡р│Бр▓жр│З р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓мр▓╣р│Бр▓жр│Б.",
        "pa": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓, риорйИриВ ри╕ри╛ри░риерйА ри╣ри╛риВред ридрйБри╕рйАриВ риорйИриирйВрй░ риЦрйЗридрйАримри╛рйЬрйА риири╛ри▓ ри╕римрй░ризрид риХрйЛриИ ри╡рйА ри╕ри╡ри╛ри▓ рикрйБрй▒риЫ ри╕риХрижрйЗ ри╣рйЛред",
        "or": "рмирморм╕рнНрмХрм╛рм░, рморнБрмБ рм╕рм╛рм░рмернАред рмЖрмкрмг рморнЛрмдрнЗ рмХрнГрм╖рм┐ рм╕рморнНрммрмирнНрмзрнАрнЯ рмХрнМрмгрм╕рм┐ рмкрнНрм░рм╢рнНрми рмкрмЪрм╛рм░рм┐ рмкрм╛рм░рм┐рммрнЗред"
    }
    return greetings.get(language_code, greetings["en"])

# Ask Gemini model with language-specific prompt
def ask_gemini(question, language_code, intent=None, entities=None):
    # Create language-specific prompt
    language_prompts = {
        "hi": f"рдПрдХ рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреА рддрд░рд╣, рд╕рд░рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред рдЙрддреНрддрд░ рд╡рд┐рд╕реНрддреГрдд рдФрд░ рд╕рдЯреАрдХ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред\n\nрдкреНрд░рд╢реНрди: {question}",
        "en": f"As an agricultural expert, answer in simple English. The answer should be detailed and accurate.\n\nQuestion: {question}",
        "bn": f"ржПржХржЬржи ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ рж╣рж┐рж╕рж╛ржмрзЗ, рж╕рж╣ржЬ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржиред ржЙрждрзНрждрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ рж╕ржарж┐ржХ рж╣ржУржпрж╝рж╛ ржЙржЪрж┐рждред\n\nржкрзНрж░рж╢рзНржи: {question}",
        "te": f"р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░бр░┐р░Чр░╛, р░╕р░░р░│р░ор▒Ир░и р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐. р░╕р░ор░╛р░зр░╛р░ир░В р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Хр░Вр░Чр░╛ р░ор░░р░┐р░пр▒Б р░Цр░Ър▒Нр░Ър░┐р░др░Вр░Чр░╛ р░Йр░Вр░бр░╛р░▓р░┐ред\n\nр░кр▒Нр░░р░╢р▒Нр░и: {question}",
        "mr": f"рдХреГрд╖реА рддрдЬреНрдЮ рдореНрд╣рдгреВрди, рд╕реЛрдкреНрдпрд╛ рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рджреНрдпрд╛. рдЙрддреНрддрд░ рддрдкрд╢реАрд▓рд╡рд╛рд░ рдЖрдгрд┐ рдЕрдЪреВрдХ рдЕрд╕рд╛рд╡реЗред\n\nрдкреНрд░рд╢реНрди: {question}",
        "ta": f"ро╡рпЗро│ро╛рогрпН роиро┐рокрпБрогро░ро╛роХ, роОро│ро┐роп родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН. рокродро┐ро▓рпН ро╡ро┐ро░ро┐ро╡ро╛ройродро╛роХро╡рпБроорпН родрпБро▓рпНро▓ро┐ропрооро╛ройродро╛роХро╡рпБроорпН роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпНред\n\nроХрпЗро│рпНро╡ро┐: {question}",
        "gu": f"ркХрлГрк╖рк┐ ркирк┐рк╖рлНркгрк╛ркд ркдрк░рлАркХрлЗ, рк╕рк░рк│ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ. ркЬрк╡рк╛ркм рк╡рк┐ркЧркдрк╡рк╛рк░ ркЕркирлЗ рк╕ркЪрлЛркЯ рк╣рлЛрк╡рлЛ ркЬрлЛркИркПред\n\nрккрлНрк░рк╢рлНрки: {question}",
        "kn": f"р▓Хр│Гр▓╖р▓┐ р▓др▓Ьр│Нр▓Юр▓░р▓╛р▓Чр▓┐, р▓╕р▓░р▓│ р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐. р▓Йр▓др│Нр▓др▓░р▓╡р│Б р▓╡р▓┐р▓╡р▓░р▓╡р▓╛р▓Чр▓┐ р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓Цр▓░р▓╡р▓╛р▓Чр▓┐р▓░р▓мр│Зр▓Хр│Бред\n\nр▓кр│Нр▓░р▓╢р│Нр▓ир│Ж: {question}",
        "pa": f"риЦрйЗридрйАримри╛рйЬрйА риори╛ри╣ри┐ри░ ри╡риЬрйЛриВ, ри╕ризри╛ри░рии рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ риЬри╡ри╛рим рижри┐риУред риЬри╡ри╛рим ри╡ри┐ри╕риери╛ри░рикрйВри░ри╡риХ риЕридрйЗ ри╕ри╣рйА ри╣рйЛригри╛ риЪри╛ри╣рйАрижри╛ ри╣рйИред\n\nри╕ри╡ри╛ри▓: {question}",
        "or": f"рмЬрмгрнЗ рмХрнГрм╖рм┐ рммрм┐рм╢рнЗрм╖рмЬрнНрмЮ рмнрм╛рммрм░рнЗ, рм╕рм░рм│ рмУрмбрм╝рм┐рмЖрм░рнЗ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред рмЙрмдрнНрмдрм░ рммрм┐рм╕рнНрмдрнГрмд рмУ рм╕рмарм┐рмХрнН рм╣рнЗрммрм╛ рмЙрмЪрм┐рмдред\n\nрмкрнНрм░рм╢рнНрми: {question}"
    }
    
    # Enhance prompt with NLP insights
    nlp_context = ""
    if intent:
        nlp_context += f"\nThe user is asking about {intent}. "
    
    if entities and entities["crops"]:
        nlp_context += f"\nMentioned crops: {', '.join(entities['crops'])}. "
    
    if entities and entities["locations"]:
        nlp_context += f"\nMentioned locations: {', '.join(entities['locations'])}. "
    
    # Combine everything
    prompt = f"{language_prompts.get(language_code, language_prompts['en'])}{nlp_context}\n\nQuestion: {question}"
    
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"Error generating response: {str(e)}"
    

# Enhanced styling with professional touch
st.markdown("""
    <style>
        .saarthi-title {
            font-size: 50px;
            font-weight: 800;
            color: #2E7D32;
            text-align: center;
            margin-top: 10px;
            margin-bottom: 20px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        .saarthi-subtitle {
            font-size: 24px;
            font-weight: 500;
            color: #555555;
            text-align: center;
            margin-bottom: 30px;
        }
        .question-container {
            font-size: 18px;
            line-height: 1.6;
            color: #2c3e50;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 5px solid #3498db;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        .answer-container {
            font-size: 18px;
            line-height: 1.6;
            color: #2c3e50;
            background-color: #f0f7fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 5px solid #27ae60;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        .stButton>button {
            background-color: #3498db;
            color: white;
            border-radius: 50px;
            padding: 15px 32px;
            font-size: 22px;
            font-weight: 600;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            width: auto;
            margin: 20px auto;
            display: block;
        }
        .stButton>button:hover {
            background-color: #2980b9;
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }
        .info-box {
            padding: 12px;
            border-radius: 8px;
            font-size: 18px;
        }
        .success-header {
            font-size: 22px;
            font-weight: 600;
            color: #27ae60;
            margin: 20px 0 10px 0;
        }
        .language-selector {
            background-color: #e8f5e9;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .feature-badge {
            background-color: #f0f7fa;
            border-radius: 20px;
            padding: 5px 15px;
            font-size: 12px;
            color: #2980b9;
            margin-right: 10px;
            border: 1px solid #bde0f3;
        }
    </style>
""", unsafe_allow_html=True)

def run():
    # App Title and Description with enhanced styling
    st.markdown('<div class="saarthi-title">ЁЯМ╛ рд╕рд╛рд░рдереА AI</div>', unsafe_allow_html=True)
    st.markdown('<div class="saarthi-subtitle">Your Multilingual Agricultural Assistant</div>', unsafe_allow_html=True)
    
    # Language selection
    st.markdown('<div class="language-selector">', unsafe_allow_html=True)
    selected_language = st.selectbox(
        "Select Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        list(language_codes.keys()),
        index=0
    )
    language_code = language_codes[selected_language]
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Display greeting in selected language
    st.info(get_greeting(language_code))
    
    # Add a container for better visual separation
    with st.container():
        # Voice input option
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # Speech Input Button
            if st.button(f"ЁЯОЩя╕П Ask Question by Voice"):
                user_question = speech_to_text(language_code)
                if user_question:
                    st.session_state['user_question'] = user_question
                    
        with col2:
            # Text input option
            text_question = st.text_input("Or type your question here:", 
                                     key="text_input",
                                     placeholder=f"Enter your question in {selected_language}")
            if text_question:
                st.session_state['user_question'] = text_question
        
        # Process the question (either from voice or text input)
        # Process the question (either from voice or text input)
        if 'user_question' in st.session_state and st.session_state['user_question']:
            user_question = st.session_state['user_question']
            
            # Display the original question
            st.markdown(f'<div class="question-container"><strong>тЭУ Question:</strong> {user_question}</div>', unsafe_allow_html=True)
            
            if "тЭМ" not in user_question:
                # Apply NLP techniques with a collapsible section to show the process
                with st.spinner("ЁЯдЦ Analyzing and processing your question..."):
                    # Preprocess text
                    processed_text = preprocess_text(user_question, language_code)
                    
                    # Extract intent
                    intent = classify_intent(processed_text, language_code)
                    
                    # Extract entities
                    entities = extract_entities(processed_text, language_code)
                    
                    # Analyze sentiment
                    sentiment = analyze_sentiment(processed_text, language_code)
                    
                    # Generate response template
                    template = generate_response_template(intent, entities, sentiment, language_code)
                    
                    # Get complete answer from Gemini
                    answer = ask_gemini(user_question, language_code, intent=intent, entities=entities)
                    
                    # Display NLP analysis (optional, can be hidden behind an expander)
                    with st.expander("See NLP Analysis", expanded=False):
                        st.markdown("### NLP Pipeline Results")
                        st.markdown(f"**Intent Classification:** {intent}")
                        st.markdown(f"**Entities Recognized:**")
                        st.markdown(f"- Crops: {', '.join(entities['crops']) if entities['crops'] else 'None'}")
                        st.markdown(f"- Locations: {', '.join(entities['locations']) if entities['locations'] else 'None'}")
                        st.markdown(f"**Sentiment Analysis:** {sentiment}")
                        st.markdown(f"**Response Template:** {template}")
                    
                    # Display the final answer
                    st.markdown('<div class="success-header">тЬЕ Answer:</div>', unsafe_allow_html=True)
                    st.markdown(f'<div class="answer-container">{answer}</div>', unsafe_allow_html=True)

